{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","handleOnSubmit","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","URL","encodeURI","fetch","response","json","data","gifs","map","gif","id","images","downsized_medium","GifGrid","console","log","loading","state","setState","useEffect","then","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mNA2CeA,EAvCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAEtB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OAEI,aADF,CACE,QAAMC,SAAW,SAAAC,GAAK,OAfH,SAACA,GACtBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAI7BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,KAOYO,CAAeL,IAAzC,SACE,uBACEM,KAAK,OACLC,MAAQV,EACRW,SAvBe,SAACR,GACtBF,EAAcE,EAAMS,OAAOF,a,QCOhBG,EAZK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE5B,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCTEK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAUH,GAD5C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRjB,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIE,cAAN,aAAE,EAAYC,iBAAiBlB,QATjB,kBAada,GAbc,4CAAH,sDCqCLM,EA/BC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SACjBe,QAAQC,IAAIhB,GAGZ,MCP0B,SAACA,GAE3B,MAA0BrB,mBAAS,CACjC4B,KAAM,GACNU,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WAERrB,EAASC,GACNqB,MAAM,SAAAb,GAAI,OAAIW,EAAS,CACtBZ,KAAMC,EACNS,SAAS,SAGZ,CAACjB,IAGGkB,EDX0BI,CAAatB,GAAjCY,EAAb,EAAQL,KAAaU,EAArB,EAAqBA,QAQrB,OACE,eAAC,WAAD,WACE,oBAAIrB,UAAU,oCAAd,SAAoDI,IAElDiB,GAAW,4CAEb,qBAAKrB,UAAU,YAAf,SAEIgB,EAAOH,KAAI,SAAAc,GAAK,OACd,cAAC,EAAD,eAEMA,GADCA,EAAMZ,aESVa,EAhCM,WAEnB,MAAsC7C,mBAAS,CAAC,oBAAhD,mBAAQQ,EAAR,KAAoBT,EAApB,KAMA,OACE,eAAC,WAAD,WACE,8CACA,cAAC,EAAD,CACEA,cAAgBA,IAClB,uBAEA,6BAEIS,EAAWsB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,YCnBpByB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2b3220aa.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import { Fragment } from 'react/cjs/react.production.min';\n\nconst AddCategory = ( { setCategories } ) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleOnChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2)\n    {\n      // la pura funcion del hook trae una referencia al estado anterior del componente\n      // se utiliza de la siguiente manera\n      setCategories( categories => [ inputValue, ...categories ] ); \n      setInputValue('');\n    }\n\n  };\n\n  return(\n    //<Fragment> // podemos prescindir del fragment porque el form actua como el fragment\n      <form onSubmit={ event => handleOnSubmit(event) }>\n        <input \n          type=\"text\" \n          value={ inputValue } \n          onChange={ handleOnChange } />\n      </form>\n\n    /// </Fragment> \n  );\n\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;\n\n","import React from 'react';\n// import { Fragment } from 'react/cjs/react.production.min';\n// import '../index.css'\n\nconst GifGridItem = ({ title, url }) => {\n  \n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  );\n\n};\n\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const URL = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=QPByoxmLhhYuYBLgZhK21ETSi60btLTX`;\n  const response = await fetch(URL);\n  const { data } = await response.json();\n\n  const gifs = data.map(gif => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url\n    };\n  });\n\n  return gifs;\n};","import React, { useEffect, useState } from 'react';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport GifGridItem from './GifGridItem';\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n  console.log(category)\n\n  // const [images, setImages] = useState([]);\n  const { data:images, loading } = useFetchGifs(category);\n\n  // // si la informacion del componente cambia, este hook se ejecutarÃ¡\n  // useEffect(() => {\n  //   getGifs(category)\n  //     .then(images => setImages(images));\n  // }, [ category ]);\n\n  return(\n    <Fragment>\n      <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n      { loading && <p>Cargando...</p> }\n\n      <div className=\"card-grid\">\n        {\n          images.map(image => \n            <GifGridItem \n              key={image.id}\n              {...image}/>\n            )\n        }\n      </div>\n    </Fragment>\n  );\n};\n\nexport default GifGrid;\n","import React, { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n\n    getGifs( category )\n      .then( gifs => setState({\n        data: gifs,\n        loading: false\n      }));\n\n  }, [category])\n\n\n  return state;\n\n};\n","import React, { useState } from \"react\";\nimport { Fragment } from \"react/cjs/react.production.min\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  // const categories = ['One Punch', 'Ratma 1/2', 'Dragon Ball', 'Captain Tsubasa'];\n  const [ categories, setCategories ] = useState(['Captain Comando']);\n\n  // const handleAdd = () => {\n  //   setCategories([...categories, 'oso']);\n  // };\n\n  return(\n    <Fragment>\n      <h2>GifExpertApp</h2>\n      <AddCategory \n        setCategories={ setCategories } />\n      <hr />\n\n      <ol>\n        { \n          categories.map( category => ( \n            <GifGrid \n              key={ category }\n              category={ category } /> \n          ))\n        }\n      </ol>\n\n    </Fragment>\n\n  );\n\n};\n\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}